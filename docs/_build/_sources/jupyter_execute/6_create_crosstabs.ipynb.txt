{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c8f97be4",
   "metadata": {},
   "source": [
    "# Create crosstabs\n",
    "\n",
    "\n",
    "## Introduction\n",
    "Tally's `crosstab` method supports a variety of options and can be used both in a Jupyter Notebook environment and to produce Excel tables. Here we will cover how the method works and what options it supports, and in the next section we will show how it can be used to generate Excel tables.\n",
    "\n",
    "## Running a basic crosstab\n",
    "Tally's crosstab method is used to run crosstabs (see the [API reference on crosstab](https://tally.datasmoothie.com/#tag/Aggregations/operation/crosstab) for full details)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "de512ad4",
   "metadata": {
    "tags": [
     "remove-cell"
    ]
   },
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'tally'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[1], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtally\u001b[39;00m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mos\u001b[39;00m\n\u001b[1;32m      3\u001b[0m dataset \u001b[38;5;241m=\u001b[39m tally\u001b[38;5;241m.\u001b[39mDataSet(api_key\u001b[38;5;241m=\u001b[39mos\u001b[38;5;241m.\u001b[39menviron\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtally_api_key\u001b[39m\u001b[38;5;124m'\u001b[39m))\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'tally'"
     ]
    }
   ],
   "source": [
    "import tally\n",
    "import os\n",
    "dataset = tally.DataSet(api_key=os.environ.get('tally_api_key'))\n",
    "dataset.use_spss('./data/Example Data (A).sav')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d3f0e3ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset.crosstab( x='q2b', y='gender')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a439dd4b",
   "metadata": {},
   "source": [
    "```\n",
    ">>> dataset.crosstab( x='q2b', y='gender')\n",
    "```\n",
    "<table border=\"1\" class=\"dataframe\">  <thead>    <tr>      <th></th>      <th>Question</th>      <th colspan=\"2\" halign=\"left\">What is your gender?</th>    </tr>    <tr>      <th></th>      <th>Values</th>      <th>Male</th>      <th>Female</th>    </tr>    <tr>      <th>Question</th>      <th>Values</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan=\"4\" valign=\"top\">How regularly do you participate in any fitness or sports activity?</th>      <th>Base</th>      <td>2998.0</td>      <td>3309.0</td>    </tr>    <tr>      <th>Regularly</th>      <td>385.0</td>      <td>356.0</td>    </tr>    <tr>      <th>Irregularly</th>      <td>2458.0</td>      <td>2689.0</td>    </tr>    <tr>      <th>Never</th>      <td>155.0</td>      <td>264.0</td>    </tr>  </tbody></table>\n",
    "\n",
    "The default value displayed in the table cells are counts. We can decide whether we want to display counts, column percentages (c%) or both with the 'ci' parameter. For a full list of parameters, consult the [Tally API reference](https://tally.datasmoothie.com/#tag/Aggregations/operation/crosstab).\n",
    "\n",
    "```\n",
    ">>> dataset.crosstab( x='q2b', y='gender', ci=['counts', 'c%'])\n",
    "```\n",
    "<table border=\"1\" class=\"dataframe\">  <thead>    <tr>      <th></th>      <th>Question</th>      <th colspan=\"2\" halign=\"left\">What is your gender?</th>    </tr>    <tr>      <th></th>      <th>Values</th>      <th>Male</th>      <th>Female</th>    </tr>    <tr>      <th>Question</th>      <th>Values</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan=\"7\" valign=\"top\">How regularly do you participate in any fitness or sports activity?</th>      <th>Base</th>      <td>2998.0</td>      <td>3309.0</td>    </tr>    <tr>      <th>Regularly</th>      <td>385.0</td>      <td>356.0</td>    </tr>    <tr>      <th></th>      <td>12.8</td>      <td>10.8</td>    </tr>    <tr>      <th>Irregularly</th>      <td>2458.0</td>      <td>2689.0</td>    </tr>    <tr>      <th></th>      <td>82.0</td>      <td>81.3</td>    </tr>    <tr>      <th>Never</th>      <td>155.0</td>      <td>264.0</td>    </tr>    <tr>      <th></th>      <td>5.2</td>      <td>8.0</td>    </tr>  </tbody></table>\n",
    "\n",
    "## Intepreting significance test results\n",
    "\n",
    "We can test for significance using column proportion tests by adding the parameter `sig_level`.\n",
    "\n",
    "```\n",
    ">>> dataset.crosstab(x='q2b', y='locality', ci=['c%'], sig_level=[0.05])\n",
    "```\n",
    "<table border=\"1\" class=\"dataframe\">  <thead>    <tr>      <th></th>      <th>Question</th>      <th colspan=\"5\" halign=\"left\">How would you describe the areas in which you live?</th>    </tr>    <tr>      <th></th>      <th>Values</th>      <th>CBD (central business district)</th>      <th>Urban</th>      <th>Suburban</th>      <th>Rural</th>      <th>Remote</th>    </tr>    <tr>      <th></th>      <th>Test-IDs</th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>      <th>E</th>    </tr>    <tr>      <th>Question</th>      <th>Values</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan=\"7\" valign=\"top\">How regularly do you participate in any fitness or sports activity?</th>      <th>Base</th>      <td>2465.0</td>      <td>1618.0</td>      <td>903.0</td>      <td>538.0</td>      <td>647.0</td>    </tr>    <tr>      <th>Regularly</th>      <td>12.0</td>      <td>13.0</td>      <td>12.0</td>      <td>12.0</td>      <td>9.0</td>    </tr>    <tr>      <th>0.05</th>      <td>E</td>      <td>E</td>      <td></td>      <td></td>      <td></td>    </tr>    <tr>      <th>Irregularly</th>      <td>82.0</td>      <td>81.0</td>      <td>82.0</td>      <td>80.0</td>      <td>82.0</td>    </tr>    <tr>      <th>0.05</th>      <td></td>      <td></td>      <td></td>      <td></td>      <td></td>    </tr>    <tr>      <th>Never</th>      <td>6.0</td>      <td>6.0</td>      <td>6.0</td>      <td>8.0</td>      <td>9.0</td>    </tr>    <tr>      <th>0.05</th>      <td></td>      <td></td>      <td></td>      <td></td>      <td>A.B.C</td>    </tr>  </tbody></table>\n",
    "\n",
    "Each answer is given a letter as a Test-ID, \"Central Business District\" is A, \"Urban\" is B, etc. The test results are shown by each answer, and if a letter for a column shows up, it means that the current column is significantly higher than the column indicated by the letter. For example, people who live in central business districts and in urban locations (Test-IDs A and B) are significantly liklier to excersise regularly than those in Remote locations (Test-ID E).\n",
    "\n",
    "\n",
    "## Adding descriptive statistics to crosstabs\n",
    "\n",
    "We can add descriptive statistics to crosstabs with the parameter 'stats'.\n",
    "\n",
    "```\n",
    ">>> dataset.crosstab(x='q14r01c01', y='locality', ci=['c%'], stats=['mean'], sig_level=[0.05])\n",
    "```\n",
    "<table border=\"1\" class=\"dataframe\">  <thead>    <tr>      <th></th>      <th>Question</th>      <th colspan=\"5\" halign=\"left\">How would you describe the areas in which you live?</th>    </tr>    <tr>      <th></th>      <th>Values</th>      <th>CBD (central business district)</th>      <th>Urban</th>      <th>Suburban</th>      <th>Rural</th>      <th>Remote</th>    </tr>    <tr>      <th></th>      <th>Test-IDs</th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>      <th>E</th>    </tr>    <tr>      <th>Question</th>      <th>Values</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan=\"13\" valign=\"top\">Store 1 - I had a good experience in the store.</th>      <th>Base</th>      <td>3106.0</td>      <td>2245.0</td>      <td>1180.0</td>      <td>718.0</td>      <td>829.0</td>    </tr>    <tr>      <th>Strongly disagree</th>      <td>24.2</td>      <td>24.6</td>      <td>27.5</td>      <td>23.7</td>      <td>22.6</td>    </tr>    <tr>      <th>0.05</th>      <td></td>      <td></td>      <td>A.E</td>      <td></td>      <td></td>    </tr>    <tr>      <th>Disagree</th>      <td>24.1</td>      <td>24.9</td>      <td>25.8</td>      <td>25.3</td>      <td>25.0</td>    </tr>    <tr>      <th>0.05</th>      <td></td>      <td></td>      <td></td>      <td></td>      <td></td>    </tr>    <tr>      <th>Neither agree nor disagree</th>      <td>26.5</td>      <td>26.0</td>      <td>23.1</td>      <td>24.2</td>      <td>26.7</td>    </tr>    <tr>      <th>0.05</th>      <td>C</td>      <td></td>      <td></td>      <td></td>      <td></td>    </tr>    <tr>      <th>Agree</th>      <td>25.1</td>      <td>24.5</td>      <td>23.6</td>      <td>26.7</td>      <td>25.8</td>    </tr>    <tr>      <th>0.05</th>      <td></td>      <td></td>      <td></td>      <td></td>      <td></td>    </tr>    <tr>      <th>Strongly agree</th>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>    </tr>    <tr>      <th>0.05</th>      <td></td>      <td></td>      <td></td>      <td></td>      <td></td>    </tr>    <tr>      <th>Mean</th>      <td>2.5</td>      <td>2.5</td>      <td>2.4</td>      <td>2.5</td>      <td>2.6</td>    </tr>    <tr>      <th>0.05</th>      <td>C</td>      <td></td>      <td></td>      <td>C</td>      <td>C</td>    </tr>  </tbody></table>\n",
    "\n",
    "Here we have added `mean` to the results, and as we can see, it gets tested for significance as well as the other answers.\n",
    "\n",
    "## filter - selecting cuts from your data\n",
    "We can select subsets of the data to work with for a particular crosstab, instead of filtering the whole dataset like we did in [the section on cleaning](../3_clean_data), with the parameter `f`.\n",
    "\n",
    "\n",
    "```\n",
    ">>> dataset.crosstab(x='q14r06c03', y='locality', f={'gender':[1]})\n",
    "```\n",
    "<table border=\"1\" class=\"dataframe\">  <thead>    <tr>      <th></th>      <th>Question</th>      <th colspan=\"5\" halign=\"left\">How would you describe the areas in which you live?</th>    </tr>    <tr>      <th></th>      <th>Values</th>      <th>CBD (central business district)</th>      <th>Urban</th>      <th>Suburban</th>      <th>Rural</th>      <th>Remote</th>    </tr>    <tr>      <th>Question</th>      <th>Values</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan=\"6\" valign=\"top\">Store 3 - The wait time when checking out was acceptable.</th>      <th>Base</th>      <td>768.0</td>      <td>529.0</td>      <td>285.0</td>      <td>166.0</td>      <td>168.0</td>    </tr>    <tr>      <th>Strongly disagree</th>      <td>194.0</td>      <td>130.0</td>      <td>72.0</td>      <td>50.0</td>      <td>47.0</td>    </tr>    <tr>      <th>Disagree</th>      <td>208.0</td>      <td>127.0</td>      <td>66.0</td>      <td>35.0</td>      <td>48.0</td>    </tr>    <tr>      <th>Neither agree nor disagree</th>      <td>175.0</td>      <td>126.0</td>      <td>65.0</td>      <td>38.0</td>      <td>34.0</td>    </tr>    <tr>      <th>Agree</th>      <td>191.0</td>      <td>146.0</td>      <td>82.0</td>      <td>43.0</td>      <td>39.0</td>    </tr>    <tr>      <th>Strongly agree</th>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>    </tr>  </tbody></table>"
   ]
  }
 ],
 "metadata": {
  "file_format": "mystnb",
  "kernelspec": {
   "display_name": "python3",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  },
  "source_map": [
   5,
   15,
   23,
   25
  ]
 },
 "nbformat": 4,
 "nbformat_minor": 5
}