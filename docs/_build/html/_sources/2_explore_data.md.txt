---
file_format: mystnb
kernelspec:
  name: python3
---
# Explore data

```{code-cell}
:tags: [remove-cell]

import os, sys
sys.path.append(os.path.abspath('../'))
import tally
dataset = tally.DataSet(api_key=os.environ.get('tally_api_key'))
dataset.use_spss('./data/Example Data (A).sav')
```

Once our data is loaded, we can explore what variables it has and the meta data for the variables. We assume that the data [has been loaded](../1_load_data) into a variable called `dataset`. For more information on the API endpoints used in these examples, refer to the [Tally API documentation](https://tally.datasmoothie.com).

## variables - Listing variables

Use the [variables](https://tally.datasmoothie.com/#tag/Data-Processing/operation/variables) method to get a list of variables. It returns a dictionary with the keys keys `single`, `delimited set`, `array`, `int`, `float`, `string`, `date`. These all have a list of strings that are the names of variables.

```{code-cell}
:tags: [scroll-output] 

dataset.variables()
print('hello')
```

```
>>> 
{'single': 
    ['gender', 
     'locality', 
      'ethnicity', 
      'q1', 
      'q2_1', 
      ... 
}
```

## meta - Exploring meta data

Use the [meta](https://tally.datasmoothie.com/#tag/Data-Processing/operation/meta) method to explore answer codes and labels.

```
>>> dataset.meta('q1')
```
<table border="1" class="dataframe">  <thead>    <tr style="text-align: left;">      <th></th>      <th>codes</th>      <th>texts</th>      <th>missing</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>1</td>      <td>CBD (central business district)</td>      <td>None</td>    </tr>    <tr>      <th>2</th>      <td>2</td>      <td>Urban</td>      <td>None</td>    </tr>    <tr>      <th>3</th>      <td>3</td>      <td>Suburban</td>      <td>None</td>    </tr>    <tr>      <th>4</th>      <td>4</td>      <td>Rural</td>      <td>None</td>    </tr>    <tr>      <th>5</th>      <td>5</td>      <td>Remote</td>      <td>None</td>    </tr>  </tbody></table>

## Other methods to explore data

Other methods to explore the data include [get_variable_text](https://tally.datasmoothie.com/#tag/Data-Processing/operation/getVariableText), [find](https://tally.datasmoothie.com/#tag/Datasources-and-files/operation/find), [values](https://tally.datasmoothie.com/#tag/Data-Processing/operation/values).

## Pandas dataframe

The data can also be accessed as a pandas dataframe.

```
>>> df = dataset.get_dataframe()

>>> df.head()
```
<div style="overflow-x:scroll;">
<table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>record_number</th>      <th>unique_id</th>      <th>age</th>      <th>birth_day</th>      <th>birth_month</th>      <th>birth_year</th>      <th>gender</th>      <th>locality</th>      <th>ethnicity</th>      <th>religion</th>      <th>q1</th>      <th>q2__1</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2.0</td>      <td>402891.0</td>      <td>22.0</td>      <td>25.0</td>      <td>3.0</td>      <td>1993.0</td>      <td>1.0</td>      <td>1.0</td>      <td>1.0</td>      <td>2.0</td>      <td>4.0</td>      <td>1.0</td>    </tr>    <tr>      <th>1</th>      <td>3.0</td>      <td>27541022.0</td>      <td>22.0</td>      <td>27.0</td>      <td>11.0</td>      <td>1993.0</td>      <td>2.0</td>      <td>3.0</td>      <td>1.0</td>      <td>NaN</td>      <td>4.0</td>      <td>0.0</td>    </tr>    <tr>      <th>2</th>      <td>4.0</td>      <td>335506.0</td>      <td>28.0</td>      <td>3.0</td>      <td>11.0</td>      <td>1987.0</td>      <td>1.0</td>      <td>2.0</td>      <td>1.0</td>      <td>3.0</td>      <td>7.0</td>      <td>NaN</td>    </tr>    <tr>      <th>3</th>      <td>5.0</td>      <td>22885610.0</td>      <td>31.0</td>      <td>11.0</td>      <td>9.0</td>      <td>1984.0</td>      <td>1.0</td>      <td>2.0</td>      <td>1.0</td>      <td>NaN</td>      <td>5.0</td>      <td>NaN</td>    </tr>    <tr>      <th>4</th>      <td>6.0</td>      <td>229122.0</td>      <td>38.0</td>      <td>24.0</td>      <td>4.0</td>      <td>1977.0</td>      <td>1.0</td>      <td>1.0</td>      <td>1.0</td>      <td>NaN</td>      <td>2.0</td>      <td>NaN</td>    </tr>  </tbody></table><div>'
