{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8b17de9e",
   "metadata": {},
   "source": [
    "# Explore data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "229006cd",
   "metadata": {
    "tags": [
     "remove-cell"
    ]
   },
   "outputs": [],
   "source": [
    "import os, sys\n",
    "sys.path.append(os.path.abspath('../'))\n",
    "import tally\n",
    "dataset = tally.DataSet(api_key=os.environ.get('tally_api_key'))\n",
    "dataset.use_spss('./data/Example Data (A).sav')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0dce5fc2",
   "metadata": {},
   "source": [
    "Once our data is loaded, we can explore what variables it has and the meta data for the variables. We assume that the data [has been loaded](../1_load_data) into a variable called `dataset`. For more information on the API endpoints used in these examples, refer to the [Tally API documentation](https://tally.datasmoothie.com).\n",
    "\n",
    "## variables - Listing variables\n",
    "\n",
    "Use the [variables](https://tally.datasmoothie.com/#tag/Data-Processing/operation/variables) method to get a list of variables. It returns a dictionary with the keys keys `single`, `delimited set`, `array`, `int`, `float`, `string`, `date`. These all have a list of strings that are the names of variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "640e5406",
   "metadata": {
    "tags": [
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello\n"
     ]
    }
   ],
   "source": [
    "dataset.variables()\n",
    "print('hello')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b3205db",
   "metadata": {},
   "source": [
    "```\n",
    ">>> \n",
    "{'single': \n",
    "    ['gender', \n",
    "     'locality', \n",
    "      'ethnicity', \n",
    "      'q1', \n",
    "      'q2_1', \n",
    "      ... \n",
    "}\n",
    "```\n",
    "\n",
    "## meta - Exploring meta data\n",
    "\n",
    "Use the [meta](https://tally.datasmoothie.com/#tag/Data-Processing/operation/meta) method to explore answer codes and labels.\n",
    "\n",
    "```\n",
    ">>> dataset.meta('q1')\n",
    "```\n",
    "<table border=\"1\" class=\"dataframe\">  <thead>    <tr style=\"text-align: left;\">      <th></th>      <th>codes</th>      <th>texts</th>      <th>missing</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>1</td>      <td>CBD (central business district)</td>      <td>None</td>    </tr>    <tr>      <th>2</th>      <td>2</td>      <td>Urban</td>      <td>None</td>    </tr>    <tr>      <th>3</th>      <td>3</td>      <td>Suburban</td>      <td>None</td>    </tr>    <tr>      <th>4</th>      <td>4</td>      <td>Rural</td>      <td>None</td>    </tr>    <tr>      <th>5</th>      <td>5</td>      <td>Remote</td>      <td>None</td>    </tr>  </tbody></table>\n",
    "\n",
    "## Other methods to explore data\n",
    "\n",
    "Other methods to explore the data include [get_variable_text](https://tally.datasmoothie.com/#tag/Data-Processing/operation/getVariableText), [find](https://tally.datasmoothie.com/#tag/Datasources-and-files/operation/find), [values](https://tally.datasmoothie.com/#tag/Data-Processing/operation/values).\n",
    "\n",
    "## Pandas dataframe\n",
    "\n",
    "The data can also be accessed as a pandas dataframe.\n",
    "\n",
    "```\n",
    ">>> df = dataset.get_dataframe()\n",
    "\n",
    ">>> df.head()\n",
    "```\n",
    "<div style=\"overflow-x:scroll;\">\n",
    "<table border=\"1\" class=\"dataframe\">  <thead>    <tr style=\"text-align: right;\">      <th></th>      <th>record_number</th>      <th>unique_id</th>      <th>age</th>      <th>birth_day</th>      <th>birth_month</th>      <th>birth_year</th>      <th>gender</th>      <th>locality</th>      <th>ethnicity</th>      <th>religion</th>      <th>q1</th>      <th>q2__1</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2.0</td>      <td>402891.0</td>      <td>22.0</td>      <td>25.0</td>      <td>3.0</td>      <td>1993.0</td>      <td>1.0</td>      <td>1.0</td>      <td>1.0</td>      <td>2.0</td>      <td>4.0</td>      <td>1.0</td>    </tr>    <tr>      <th>1</th>      <td>3.0</td>      <td>27541022.0</td>      <td>22.0</td>      <td>27.0</td>      <td>11.0</td>      <td>1993.0</td>      <td>2.0</td>      <td>3.0</td>      <td>1.0</td>      <td>NaN</td>      <td>4.0</td>      <td>0.0</td>    </tr>    <tr>      <th>2</th>      <td>4.0</td>      <td>335506.0</td>      <td>28.0</td>      <td>3.0</td>      <td>11.0</td>      <td>1987.0</td>      <td>1.0</td>      <td>2.0</td>      <td>1.0</td>      <td>3.0</td>      <td>7.0</td>      <td>NaN</td>    </tr>    <tr>      <th>3</th>      <td>5.0</td>      <td>22885610.0</td>      <td>31.0</td>      <td>11.0</td>      <td>9.0</td>      <td>1984.0</td>      <td>1.0</td>      <td>2.0</td>      <td>1.0</td>      <td>NaN</td>      <td>5.0</td>      <td>NaN</td>    </tr>    <tr>      <th>4</th>      <td>6.0</td>      <td>229122.0</td>      <td>38.0</td>      <td>24.0</td>      <td>4.0</td>      <td>1977.0</td>      <td>1.0</td>      <td>1.0</td>      <td>1.0</td>      <td>NaN</td>      <td>2.0</td>      <td>NaN</td>    </tr>  </tbody></table><div>'"
   ]
  }
 ],
 "metadata": {
  "file_format": "mystnb",
  "kernelspec": {
   "display_name": "python3",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  },
  "source_map": [
   5,
   8,
   16,
   24,
   29
  ]
 },
 "nbformat": 4,
 "nbformat_minor": 5
}